# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:23:45+00:00

from __future__ import annotations

from datetime import datetime as datetime_aliased
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint


class CrawlDatamodelField(BaseModel):
    group: str = Field(..., description='')
    id: str = Field(..., description='')
    multiple: bool = Field(..., description='')
    name: str = Field(..., description='')
    permissions: List[str] = Field(..., description='')
    subtype: str = Field(..., description='')
    type: str = Field(..., description='')


class CrawlDatamodelGroup(BaseModel):
    id: str = Field(..., description='')
    name: str = Field(..., description='')


class CrawlOrphanURLs(BaseModel):
    url: str = Field(..., description='')
    visits: int = Field(..., description='')


class CrawlStatistics(BaseModel):
    depth_current: int = Field(..., description='')
    last_upd_dt: datetime_aliased = Field(..., description='')
    pages_dones: int = Field(..., description='')
    pages_dones_2xx: int = Field(..., description='')
    pages_dones_3xx: int = Field(..., description='')
    pages_dones_4xx: int = Field(..., description='')
    pages_dones_5xx: int = Field(..., description='')
    pages_dones_networkerror: int = Field(..., description='')
    pages_dones_xxx: int = Field(..., description='')
    pages_known: int = Field(..., description='')


class CrawlStatisticsTimePoint(BaseModel):
    count: int = Field(..., description='')
    datetime: datetime_aliased = Field(..., description='')


class CrawlStatisticsUrls(BaseModel):
    content_type: str = Field(..., description='')
    date: str = Field(..., description='')
    delay_first_byte: int = Field(..., description='')
    delay_last_byte: int = Field(..., description='')
    gzip: bool = Field(..., description='')
    http: int = Field(..., description='')
    length: int = Field(..., description='')
    redirects_to: Optional[str] = Field(None, description='')
    url: str = Field(..., description='')


class Default(BaseModel):
    pass


class Error(BaseModel):
    error_code: Optional[str] = Field(None, description='Error Code')
    error_detail: Optional[Dict[str, Any]] = Field(
        None, description='If available, detailed error'
    )
    message: Optional[str] = Field(None, description='Error Message')


class DefaultPayload(BaseModel):
    error: Optional[Error] = None


class FieldValuesResult(BaseModel):
    nb_urls: int = Field(..., description='')
    value: str = Field(..., description='')


class LinksPercentilesItem(BaseModel):
    avg: int = Field(..., description='')
    id: int = Field(..., description='')
    max: int = Field(..., description='')
    metric_total: int = Field(..., description='')
    min: int = Field(..., description='')
    url_total: int = Field(..., description='')


class LinksTopDomainsSamples(BaseModel):
    sources: List[str] = Field(..., description='')
    unique_links: int = Field(..., description='')
    url: str = Field(..., description='')


class PageRankLost(BaseModel):
    external: float = Field(..., description='')
    non_crawled: float = Field(..., description='')
    robots_txt: float = Field(..., description='')


class ProjectSavedFilter(BaseModel):
    filters: Dict[str, Any] = Field(..., description='')
    identifier: Optional[str] = Field(None, description='')
    name: str = Field(..., description='')


class ProjectSettingsSerializer(BaseModel):
    allowed_domains: List[str] = Field(..., description='')
    blacklisted_domains: List[str] = Field(..., description='')
    compare_crawl: Optional[bool] = Field(None, description='')
    crawl_gzip: Optional[bool] = Field(None, description='')
    extra_headers: Optional[str] = Field(None, description='')
    google_analytics_account_email: Optional[str] = Field(
        None, description='Keep email in case user delete his social auth connection'
    )
    google_analytics_nb_days: Optional[conint(ge=1, le=90)] = Field(
        None, description=''
    )
    google_analytics_site_id: Optional[conint(ge=-2147483648, le=2147483647)] = Field(
        None, description=''
    )
    google_social_auth_id: Optional[conint(ge=-2147483648, le=2147483647)] = Field(
        None, description=''
    )
    has_robots_txt: Optional[str] = Field(None, description='')
    header_settings: List[str] = Field(..., description='')
    max_depth: Optional[conint(ge=0, le=2147483647)] = Field(None, description='')
    max_nb_pages: conint(ge=1, le=2147483647) = Field(..., description='')
    max_pages_per_sec: Optional[conint(ge=1, le=2147483647)] = Field(
        None, description=''
    )
    respect_nofollow: Optional[bool] = Field(None, description='')
    sitemaps: List[str] = Field(..., description='')
    start_urls: List[str] = Field(..., description='')
    user_agent: Optional[str] = Field(None, description='')


class RewritingRuleSerializer(BaseModel):
    ignore_case: bool = Field(..., description='')
    regex: str = Field(..., description='')
    replace: str = Field(..., description='')


class SitemapsReportOnly(BaseModel):
    in_configuration: int = Field(..., description='')
    out_of_configuration: int = Field(..., description='')


class SitemapsReportSitemapError(BaseModel):
    message: str = Field(..., description='')
    type: str = Field(..., description='')


class URLRewritingRulesSerializer(BaseModel):
    rules: List[RewritingRuleSerializer] = Field(..., description='')
    urls: List[str] = Field(..., description='')


class UrlDetail(BaseModel):
    pass


class UrlsAgg(BaseModel):
    aggs: Optional[List[Dict[str, Any]]] = Field(None, description='')
    count: int = Field(..., description='')


class UrlsAggsQuery(BaseModel):
    aggs: Optional[List[Dict[str, Any]]] = Field(None, description='')
    filters: Optional[Dict[str, Any]] = Field(None, description='')


class UrlsErrorAgg(BaseModel):
    error_code: str = Field(..., description='')
    message: str = Field(..., description='')


class UrlsQuery(BaseModel):
    fields: Optional[List[str]] = Field(None, description='')
    filters: Optional[Dict[str, Any]] = Field(None, description='')
    sort: Optional[List[Dict[str, Any]]] = Field(None, description='')


class User(BaseModel):
    company_name: Optional[str] = Field(None, description='')
    date_joined: Optional[datetime_aliased] = Field(None, description='')
    email: Optional[str] = Field(None, description='')
    first_name: Optional[str] = Field(None, description='')
    is_organization: Optional[str] = Field(None, description='')
    last_name: Optional[str] = Field(None, description='')
    login: Optional[str] = Field(None, description='')
    status: Optional[str] = Field(None, description='')
    url: Optional[str] = Field(None, description='')


class String(BaseModel):
    pass


class Frequency(Enum):
    field_1mn = '1mn'
    field_5mn = '5mn'
    field_60mn = '60mn'


class AnalysesUsernameProjectSlugAnalysisSlugCrawlStatisticsUrlsListTypeGetResponse(
    RootModel[List[Any]]
):
    root: List[Any]


class ListType(Enum):
    crawled = 'crawled'
    errors = 'errors'


class AnalysesUsernameProjectSlugAnalysisSlugFeaturesGanalyticsOrphanUrlsMediumSourceGetResponse(
    BaseModel
):
    count: Optional[int] = Field(None, description='')
    next: Optional[str] = Field(None, description='')
    page: Optional[int] = Field(None, description='')
    previous: Optional[str] = Field(None, description='')
    results: Optional[List[CrawlOrphanURLs]] = Field(None, description='')
    size: Optional[int] = Field(None, description='')


class Medium(Enum):
    organic = 'organic'
    social = 'social'


class Source(Enum):
    all = 'all'
    aol = 'aol'
    ask = 'ask'
    baidu = 'baidu'
    bing = 'bing'
    facebook = 'facebook'
    google = 'google'
    google_ = 'google+'
    linkedin = 'linkedin'
    naver = 'naver'
    pinterest = 'pinterest'
    reddit = 'reddit'
    tumblr = 'tumblr'
    twitter = 'twitter'
    yahoo = 'yahoo'
    yandex = 'yandex'


class AnalysesUsernameProjectSlugAnalysisSlugFeaturesSitemapsSamplesOutOfConfigGetResponse(
    BaseModel
):
    count: Optional[int] = Field(None, description='')
    next: Optional[str] = Field(None, description='')
    page: Optional[int] = Field(None, description='')
    previous: Optional[str] = Field(None, description='')
    results: Optional[List[str]] = Field(None, description='')
    size: Optional[int] = Field(None, description='')


class AnalysesUsernameProjectSlugAnalysisSlugFeaturesSitemapsSamplesSitemapOnlyGetResponse(
    BaseModel
):
    count: Optional[int] = Field(None, description='')
    next: Optional[str] = Field(None, description='')
    page: Optional[int] = Field(None, description='')
    previous: Optional[str] = Field(None, description='')
    results: Optional[List[str]] = Field(None, description='')
    size: Optional[int] = Field(None, description='')


class Area(Enum):
    current = 'current'
    disappeared = 'disappeared'
    new = 'new'
    search_engines_orphans = 'search_engines_orphans'


class AnalysesUsernameProjectSlugAnalysisSlugUrlsPostResponse(BaseModel):
    count: Optional[int] = Field(None, description='')
    next: Optional[str] = Field(None, description='')
    page: Optional[int] = Field(None, description='')
    previous: Optional[str] = Field(None, description='')
    results: Optional[List[UrlDetail]] = Field(None, description='')
    size: Optional[int] = Field(None, description='')


class AnalysesUsernameProjectSlugAnalysisSlugUrlsAggsPostResponse(RootModel[List[Any]]):
    root: List[Any]


class Area8(Enum):
    current = 'current'
    new = 'new'


class Fields(RootModel[List[str]]):
    root: List[str]


class ProjectsUsernameProjectSlugFiltersGetResponse(BaseModel):
    count: Optional[int] = Field(None, description='')
    next: Optional[str] = Field(None, description='')
    page: Optional[int] = Field(None, description='')
    previous: Optional[str] = Field(None, description='')
    results: Optional[List[ProjectSavedFilter]] = Field(None, description='')
    size: Optional[int] = Field(None, description='')


class Area10(Enum):
    current = 'current'
    disappeared = 'disappeared'
    new = 'new'


class Analysis(BaseModel):
    config: Optional[str] = Field(None, description='')
    date_created: Optional[datetime_aliased] = Field(None, description='')
    date_finished: Optional[datetime_aliased] = Field(None, description='')
    date_last_modified: Optional[datetime_aliased] = Field(
        None, description='Date of last modified analysis'
    )
    date_launched: Optional[datetime_aliased] = Field(None, description='')
    features: Optional[str] = Field(None, description='')
    id: Optional[int] = Field(None, description='')
    name: Optional[str] = Field(None, description='')
    slug: Optional[str] = Field(None, description='')
    status: Optional[str] = Field(None, description='')
    url: Optional[str] = Field(None, description='')
    urls_done: Optional[str] = Field(None, description='')
    urls_in_queue: Optional[str] = Field(None, description='')
    user: User


class AnalysisDetail(BaseModel):
    config: Optional[str] = Field(None, description='')
    date_finished: Optional[datetime_aliased] = Field(None, description='')
    date_last_modified: Optional[datetime_aliased] = Field(
        None, description='Date of last modified analysis'
    )
    date_launched: Optional[datetime_aliased] = Field(None, description='')
    failures: Optional[str] = Field(None, description='')
    features: Optional[str] = Field(None, description='')
    id: Optional[int] = Field(None, description='')
    name: Optional[str] = Field(None, description='')
    red_button_domain: Optional[str] = Field(None, description='')
    slug: Optional[str] = Field(None, description='')
    url: Optional[str] = Field(None, description='')
    urls_done: Optional[str] = Field(None, description='')
    urls_in_queue: Optional[str] = Field(None, description='')
    user: User


class CrawlDatamodel(BaseModel):
    fields: List[CrawlDatamodelField] = Field(..., description='')
    groups: List[CrawlDatamodelGroup] = Field(..., description='')


class CrawlStatisticsTime(BaseModel):
    avg_delay: List[CrawlStatisticsTimePoint] = Field(..., description='')
    avg_size: List[CrawlStatisticsTimePoint] = Field(..., description='')
    frequency: str = Field(..., description='')
    http_code_2xx: List[CrawlStatisticsTimePoint] = Field(..., description='')
    http_code_3xx: List[CrawlStatisticsTimePoint] = Field(..., description='')
    http_code_4xx: List[CrawlStatisticsTimePoint] = Field(..., description='')
    http_code_5xx: List[CrawlStatisticsTimePoint] = Field(..., description='')
    http_code_xxx: List[CrawlStatisticsTimePoint] = Field(..., description='')
    last_update_date: datetime_aliased = Field(..., description='')
    new_urls: List[CrawlStatisticsTimePoint] = Field(..., description='')


class CsvExportStatus(BaseModel):
    area: Optional[int] = Field('current', description='')
    date_created: Optional[datetime_aliased] = Field(None, description='')
    job_id: Optional[str] = Field(None, description='')
    job_status: Optional[str] = Field(None, description='')
    job_url: Optional[str] = Field(None, description='')
    nb_results: Optional[conint(ge=0, le=2147483647)] = Field(None, description='')
    query: UrlsQuery
    results: Optional[str] = Field(None, description='')


class FieldValues(BaseModel):
    count: int = Field(..., description='')
    results: List[FieldValuesResult] = Field(..., description='')


class LinksPercentiles(BaseModel):
    domain: str = Field(..., description='')
    percentiles: List[LinksPercentilesItem] = Field(..., description='')


class LinksTopDomains(BaseModel):
    domain: str = Field(..., description='')
    follow_links: int = Field(..., description='')
    follow_samples: List[LinksTopDomainsSamples] = Field(..., description='')
    nofollow_links: int = Field(..., description='')
    nofollow_samples: List[LinksTopDomainsSamples] = Field(..., description='')
    unique_follow_links: int = Field(..., description='')
    unique_nofollow_links: int = Field(..., description='')


class Project(BaseModel):
    active: Optional[bool] = Field(None, description='')
    current_settings: ProjectSettingsSerializer
    date_created: Optional[str] = Field(None, description='')
    name: str = Field(..., description='')
    slug: str = Field(..., description='')
    user: User


class SitemapsReportSitemap(BaseModel):
    error: Optional[SitemapsReportSitemapError] = None
    file_type: Optional[str] = Field(None, description='')
    invalid_urls: Optional[int] = Field(None, description='')
    sitemap_indexes: Optional[List[str]] = Field(None, description='')
    url: str = Field(..., description='')
    valid_urls: Optional[int] = Field(None, description='')


class UrlsAggs(BaseModel):
    data: Optional[UrlsAgg] = None
    error: Optional[UrlsErrorAgg] = None
    status: int = Field(..., description='')


class UrlsAggsQueries(RootModel[List[UrlsAggsQuery]]):
    root: List[UrlsAggsQuery]


class AnalysesUsernameProjectSlugGetResponse(BaseModel):
    count: Optional[int] = Field(None, description='')
    next: Optional[str] = Field(None, description='')
    page: Optional[int] = Field(None, description='')
    previous: Optional[str] = Field(None, description='')
    results: Optional[List[Analysis]] = Field(None, description='')
    size: Optional[int] = Field(None, description='')


class AnalysesUsernameProjectSlugAnalysisSlugFeaturesTopDomainsDomainsGetResponse(
    BaseModel
):
    count: Optional[int] = Field(None, description='')
    next: Optional[str] = Field(None, description='')
    page: Optional[int] = Field(None, description='')
    previous: Optional[str] = Field(None, description='')
    results: Optional[List[LinksTopDomains]] = Field(None, description='')
    size: Optional[int] = Field(None, description='')


class AnalysesUsernameProjectSlugAnalysisSlugFeaturesTopDomainsSubdomainsGetResponse(
    BaseModel
):
    count: Optional[int] = Field(None, description='')
    next: Optional[str] = Field(None, description='')
    page: Optional[int] = Field(None, description='')
    previous: Optional[str] = Field(None, description='')
    results: Optional[List[LinksTopDomains]] = Field(None, description='')
    size: Optional[int] = Field(None, description='')


class AnalysesUsernameProjectSlugAnalysisSlugUrlsExportGetResponse(BaseModel):
    count: Optional[int] = Field(None, description='')
    next: Optional[str] = Field(None, description='')
    page: Optional[int] = Field(None, description='')
    previous: Optional[str] = Field(None, description='')
    results: Optional[List[CsvExportStatus]] = Field(None, description='')
    size: Optional[int] = Field(None, description='')


class ProjectsUsernameGetResponse(BaseModel):
    count: Optional[int] = Field(None, description='')
    next: Optional[str] = Field(None, description='')
    page: Optional[int] = Field(None, description='')
    previous: Optional[str] = Field(None, description='')
    results: Optional[List[Project]] = Field(None, description='')
    size: Optional[int] = Field(None, description='')


class SitemapsReport(BaseModel):
    count: int = Field(..., description='')
    errors: List[SitemapsReportSitemap] = Field(..., description='')
    sitemap_indexes: List[SitemapsReportSitemap] = Field(..., description='')
    sitemap_only: SitemapsReportOnly
    sitemaps: List[SitemapsReportSitemap] = Field(..., description='')
